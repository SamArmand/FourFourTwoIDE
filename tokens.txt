TOKEN | Type: CLASS           Lexeme: class           Line: 1    
TOKEN | Type: ID              Lexeme: Utility         Line: 1    
TOKEN | Type: OBRACE          Lexeme: {               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: var1            Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 4               Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 5               Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 7               Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 8               Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 9               Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 1               Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 0               Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: FLOAT           Lexeme: float           Line: 1    
TOKEN | Type: ID              Lexeme: var2            Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: findMax         Line: 1    
TOKEN | Type: OPAREN          Lexeme: (               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: array           Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 100             Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: CPAREN          Lexeme: )               Line: 1    
TOKEN | Type: OBRACE          Lexeme: {               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: maxValue        Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: ID              Lexeme: maxValue        Line: 1    
TOKEN | Type: DEF             Lexeme: =               Line: 1    
TOKEN | Type: ID              Lexeme: array           Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 100             Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: FOR             Lexeme: for             Line: 1    
TOKEN | Type: OPAREN          Lexeme: (               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: DEF             Lexeme: =               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 99              Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: GREATER         Lexeme: >               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 0               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: DEF             Lexeme: =               Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: MINUS           Lexeme: -               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 1               Line: 1    
TOKEN | Type: CPAREN          Lexeme: )               Line: 1    
TOKEN | Type: OBRACE          Lexeme: {               Line: 1    
TOKEN | Type: IF              Lexeme: if              Line: 1    
TOKEN | Type: OPAREN          Lexeme: (               Line: 1    
TOKEN | Type: ID              Lexeme: array           Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: GREATER         Lexeme: >               Line: 1    
TOKEN | Type: ID              Lexeme: maxValue        Line: 1    
TOKEN | Type: CPAREN          Lexeme: )               Line: 1    
TOKEN | Type: THEN            Lexeme: then            Line: 1    
TOKEN | Type: OBRACE          Lexeme: {               Line: 1    
TOKEN | Type: ID              Lexeme: maxValue        Line: 1    
TOKEN | Type: DEF             Lexeme: =               Line: 1    
TOKEN | Type: ID              Lexeme: array           Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: CBRACE          Lexeme: }               Line: 1    
TOKEN | Type: ELSE            Lexeme: else            Line: 1    
TOKEN | Type: OBRACE          Lexeme: {               Line: 1    
TOKEN | Type: CBRACE          Lexeme: }               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: CBRACE          Lexeme: }               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: RETURN          Lexeme: return          Line: 1    
TOKEN | Type: OPAREN          Lexeme: (               Line: 1    
TOKEN | Type: ID              Lexeme: maxValue        Line: 1    
TOKEN | Type: CPAREN          Lexeme: )               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: CBRACE          Lexeme: }               Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: findMin         Line: 1    
TOKEN | Type: OPAREN          Lexeme: (               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: array           Line: 1    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 1    
TOKEN | Type: INTEGER         Lexeme: 100             Line: 1    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 1    
TOKEN | Type: CPAREN          Lexeme: )               Line: 1    
TOKEN | Type: OBRACE          Lexeme: {               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: minValue        Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: INT             Lexeme: int             Line: 1    
TOKEN | Type: ID              Lexeme: idx             Line: 1    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 1    
TOKEN | Type: ID              Lexeme: minValue        Line: 2    
TOKEN | Type: DEF             Lexeme: =               Line: 2    
TOKEN | Type: ID              Lexeme: array           Line: 2    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 2    
TOKEN | Type: INTEGER         Lexeme: 100             Line: 2    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 2    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 2    
TOKEN | Type: FOR             Lexeme: for             Line: 3    
TOKEN | Type: OPAREN          Lexeme: (               Line: 3    
TOKEN | Type: INT             Lexeme: int             Line: 3    
TOKEN | Type: ID              Lexeme: idx             Line: 3    
TOKEN | Type: DEF             Lexeme: =               Line: 3    
TOKEN | Type: INTEGER         Lexeme: 1               Line: 3    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 3    
TOKEN | Type: ID              Lexeme: idx             Line: 3    
TOKEN | Type: LEQ             Lexeme: <=              Line: 3    
TOKEN | Type: INTEGER         Lexeme: 99              Line: 3    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 3    
TOKEN | Type: ID              Lexeme: idx             Line: 3    
TOKEN | Type: DEF             Lexeme: =               Line: 3    
TOKEN | Type: OPAREN          Lexeme: (               Line: 3    
TOKEN | Type: ID              Lexeme: idx             Line: 3    
TOKEN | Type: CPAREN          Lexeme: )               Line: 3    
TOKEN | Type: PLUS            Lexeme: +               Line: 3    
TOKEN | Type: INTEGER         Lexeme: 1               Line: 3    
TOKEN | Type: CPAREN          Lexeme: )               Line: 3    
TOKEN | Type: OBRACE          Lexeme: {               Line: 3    
TOKEN | Type: IF              Lexeme: if              Line: 4    
TOKEN | Type: OPAREN          Lexeme: (               Line: 4    
TOKEN | Type: ID              Lexeme: array           Line: 4    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 4    
TOKEN | Type: ID              Lexeme: idx             Line: 4    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 4    
TOKEN | Type: LESS            Lexeme: <               Line: 4    
TOKEN | Type: ID              Lexeme: maxValue        Line: 4    
TOKEN | Type: CPAREN          Lexeme: )               Line: 4    
TOKEN | Type: THEN            Lexeme: then            Line: 4    
TOKEN | Type: OBRACE          Lexeme: {               Line: 4    
TOKEN | Type: ID              Lexeme: maxValue        Line: 5    
TOKEN | Type: DEF             Lexeme: =               Line: 5    
TOKEN | Type: ID              Lexeme: array           Line: 5    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 5    
TOKEN | Type: ID              Lexeme: idx             Line: 5    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 5    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 5    
TOKEN | Type: CBRACE          Lexeme: }               Line: 6    
TOKEN | Type: ELSE            Lexeme: else            Line: 7    
TOKEN | Type: OBRACE          Lexeme: {               Line: 7    
TOKEN | Type: CBRACE          Lexeme: }               Line: 7    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 7    
TOKEN | Type: CBRACE          Lexeme: }               Line: 8    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 8    
TOKEN | Type: RETURN          Lexeme: return          Line: 9    
TOKEN | Type: OPAREN          Lexeme: (               Line: 9    
TOKEN | Type: ID              Lexeme: minValue        Line: 9    
TOKEN | Type: CPAREN          Lexeme: )               Line: 9    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 9    
TOKEN | Type: CBRACE          Lexeme: }               Line: 10   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 10   
TOKEN | Type: CBRACE          Lexeme: }               Line: 12   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 12   
TOKEN | Type: PROGRAM         Lexeme: program         Line: 14   
TOKEN | Type: OBRACE          Lexeme: {               Line: 14   
TOKEN | Type: INT             Lexeme: int             Line: 16   
TOKEN | Type: ID              Lexeme: sample          Line: 16   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 16   
TOKEN | Type: INTEGER         Lexeme: 100             Line: 16   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 16   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 16   
TOKEN | Type: INT             Lexeme: int             Line: 17   
TOKEN | Type: ID              Lexeme: idx             Line: 17   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 17   
TOKEN | Type: INT             Lexeme: int             Line: 18   
TOKEN | Type: ID              Lexeme: maxValue        Line: 18   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 18   
TOKEN | Type: INT             Lexeme: int             Line: 19   
TOKEN | Type: ID              Lexeme: minValue        Line: 19   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 19   
TOKEN | Type: ID              Lexeme: Utility         Line: 21   
TOKEN | Type: ID              Lexeme: utility         Line: 21   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 21   
TOKEN | Type: ID              Lexeme: Utility         Line: 22   
TOKEN | Type: ID              Lexeme: arrayUtility    Line: 22   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 22   
TOKEN | Type: INTEGER         Lexeme: 2               Line: 22   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 22   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 22   
TOKEN | Type: INTEGER         Lexeme: 3               Line: 22   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 22   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 22   
TOKEN | Type: INTEGER         Lexeme: 6               Line: 22   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 22   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 22   
TOKEN | Type: INTEGER         Lexeme: 7               Line: 22   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 22   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 22   
TOKEN | Type: FOR             Lexeme: for             Line: 24   
TOKEN | Type: OPAREN          Lexeme: (               Line: 24   
TOKEN | Type: INT             Lexeme: int             Line: 24   
TOKEN | Type: ID              Lexeme: t               Line: 24   
TOKEN | Type: DEF             Lexeme: =               Line: 24   
TOKEN | Type: INTEGER         Lexeme: 0               Line: 24   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 24   
TOKEN | Type: ID              Lexeme: t               Line: 24   
TOKEN | Type: LEQ             Lexeme: <=              Line: 24   
TOKEN | Type: INTEGER         Lexeme: 100             Line: 24   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 24   
TOKEN | Type: ID              Lexeme: t               Line: 24   
TOKEN | Type: DEF             Lexeme: =               Line: 24   
TOKEN | Type: ID              Lexeme: t               Line: 24   
TOKEN | Type: PLUS            Lexeme: +               Line: 24   
TOKEN | Type: INTEGER         Lexeme: 1               Line: 24   
TOKEN | Type: CPAREN          Lexeme: )               Line: 24   
TOKEN | Type: OBRACE          Lexeme: {               Line: 24   
TOKEN | Type: GET             Lexeme: get             Line: 25   
TOKEN | Type: OPAREN          Lexeme: (               Line: 25   
TOKEN | Type: ID              Lexeme: sample          Line: 25   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 25   
TOKEN | Type: ID              Lexeme: t               Line: 25   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 25   
TOKEN | Type: CPAREN          Lexeme: )               Line: 25   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 25   
TOKEN | Type: ID              Lexeme: sample          Line: 26   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 26   
TOKEN | Type: ID              Lexeme: t               Line: 26   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 26   
TOKEN | Type: DEF             Lexeme: =               Line: 26   
TOKEN | Type: OPAREN          Lexeme: (               Line: 26   
TOKEN | Type: ID              Lexeme: sample          Line: 26   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 26   
TOKEN | Type: ID              Lexeme: t               Line: 26   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 26   
TOKEN | Type: ASTERISK        Lexeme: *               Line: 26   
TOKEN | Type: ID              Lexeme: randomize       Line: 26   
TOKEN | Type: OPAREN          Lexeme: (               Line: 26   
TOKEN | Type: CPAREN          Lexeme: )               Line: 26   
TOKEN | Type: CPAREN          Lexeme: )               Line: 26   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 26   
TOKEN | Type: CBRACE          Lexeme: }               Line: 27   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 27   
TOKEN | Type: ID              Lexeme: maxValue        Line: 29   
TOKEN | Type: DEF             Lexeme: =               Line: 29   
TOKEN | Type: ID              Lexeme: utility         Line: 29   
TOKEN | Type: DOT             Lexeme: .               Line: 29   
TOKEN | Type: ID              Lexeme: findMax         Line: 29   
TOKEN | Type: OPAREN          Lexeme: (               Line: 29   
TOKEN | Type: ID              Lexeme: sample          Line: 29   
TOKEN | Type: CPAREN          Lexeme: )               Line: 29   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 29   
TOKEN | Type: ID              Lexeme: minValue        Line: 30   
TOKEN | Type: DEF             Lexeme: =               Line: 30   
TOKEN | Type: ID              Lexeme: utility         Line: 30   
TOKEN | Type: DOT             Lexeme: .               Line: 30   
TOKEN | Type: ID              Lexeme: findMin         Line: 30   
TOKEN | Type: OPAREN          Lexeme: (               Line: 30   
TOKEN | Type: ID              Lexeme: sample          Line: 30   
TOKEN | Type: CPAREN          Lexeme: )               Line: 30   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 30   
TOKEN | Type: ID              Lexeme: utility         Line: 32   
TOKEN | Type: DOT             Lexeme: .               Line: 32   
TOKEN | Type: ID              Lexeme: var1            Line: 32   
TOKEN | Type: DEF             Lexeme: =               Line: 32   
TOKEN | Type: INTEGER         Lexeme: 10              Line: 32   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 32   
TOKEN | Type: ID              Lexeme: arrayUtility    Line: 34   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 34   
TOKEN | Type: INTEGER         Lexeme: 1               Line: 34   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 34   
TOKEN | Type: DOT             Lexeme: .               Line: 34   
TOKEN | Type: ID              Lexeme: var1            Line: 34   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 34   
TOKEN | Type: INTEGER         Lexeme: 1               Line: 34   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 34   
TOKEN | Type: OBRACKET        Lexeme: [               Line: 34   
TOKEN | Type: INTEGER         Lexeme: 2               Line: 34   
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 34   
TOKEN | Type: DEF             Lexeme: =               Line: 34   
TOKEN | Type: INTEGER         Lexeme: 2               Line: 34   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 34   
TOKEN | Type: PUT             Lexeme: put             Line: 36   
TOKEN | Type: OPAREN          Lexeme: (               Line: 36   
TOKEN | Type: ID              Lexeme: maxValue        Line: 36   
TOKEN | Type: CPAREN          Lexeme: )               Line: 36   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 36   
TOKEN | Type: PUT             Lexeme: put             Line: 37   
TOKEN | Type: OPAREN          Lexeme: (               Line: 37   
TOKEN | Type: ID              Lexeme: minValue        Line: 37   
TOKEN | Type: CPAREN          Lexeme: )               Line: 37   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 37   
TOKEN | Type: CBRACE          Lexeme: }               Line: 38   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 38   
TOKEN | Type: ID              Lexeme: real            Line: 40   
TOKEN | Type: ID              Lexeme: randomize       Line: 40   
TOKEN | Type: OPAREN          Lexeme: (               Line: 40   
TOKEN | Type: CPAREN          Lexeme: )               Line: 40   
TOKEN | Type: OBRACE          Lexeme: {               Line: 40   
TOKEN | Type: ID              Lexeme: real            Line: 42   
TOKEN | Type: ID              Lexeme: value           Line: 42   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 42   
TOKEN | Type: ID              Lexeme: value           Line: 43   
TOKEN | Type: DEF             Lexeme: =               Line: 43   
TOKEN | Type: INTEGER         Lexeme: 100             Line: 43   
TOKEN | Type: ASTERISK        Lexeme: *               Line: 43   
TOKEN | Type: OPAREN          Lexeme: (               Line: 43   
TOKEN | Type: INTEGER         Lexeme: 2               Line: 43   
TOKEN | Type: PLUS            Lexeme: +               Line: 43   
TOKEN | Type: FRACTION        Lexeme: 3.0             Line: 43   
TOKEN | Type: FWDSLASH        Lexeme: /               Line: 43   
TOKEN | Type: FRACTION        Lexeme: 7.0006          Line: 43   
TOKEN | Type: CPAREN          Lexeme: )               Line: 43   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 43   
TOKEN | Type: ID              Lexeme: value           Line: 44   
TOKEN | Type: DEF             Lexeme: =               Line: 44   
TOKEN | Type: FRACTION        Lexeme: 1.05            Line: 44   
TOKEN | Type: PLUS            Lexeme: +               Line: 44   
TOKEN | Type: OPAREN          Lexeme: (               Line: 44   
TOKEN | Type: OPAREN          Lexeme: (               Line: 44   
TOKEN | Type: FRACTION        Lexeme: 2.04            Line: 44   
TOKEN | Type: ASTERISK        Lexeme: *               Line: 44   
TOKEN | Type: FRACTION        Lexeme: 2.47            Line: 44   
TOKEN | Type: CPAREN          Lexeme: )               Line: 44   
TOKEN | Type: MINUS           Lexeme: -               Line: 44   
TOKEN | Type: FRACTION        Lexeme: 3.0             Line: 44   
TOKEN | Type: CPAREN          Lexeme: )               Line: 44   
TOKEN | Type: PLUS            Lexeme: +               Line: 44   
TOKEN | Type: FRACTION        Lexeme: 7.0006          Line: 44   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 44   
TOKEN | Type: RETURN          Lexeme: return          Line: 45   
TOKEN | Type: OPAREN          Lexeme: (               Line: 45   
TOKEN | Type: ID              Lexeme: value           Line: 45   
TOKEN | Type: CPAREN          Lexeme: )               Line: 45   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 45   
TOKEN | Type: CBRACE          Lexeme: }               Line: 46   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 46   
TOKEN | Type: EOF             Lexeme: $               Line: 46   
TOKEN | Type: EOF             Lexeme: $               Line: 46   
