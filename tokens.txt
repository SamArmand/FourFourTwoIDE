TOKEN | Type: CLASS           Lexeme: class           Line: 1    
TOKEN | Type: ID              Lexeme: Vehicle         Line: 1    
TOKEN | Type: OBRACE          Lexeme: {               Line: 1    
TOKEN | Type: CBRACE          Lexeme: }               Line: 2    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 2    
TOKEN | Type: COMMENT         Lexeme: //              Line: 4    
TOKEN | Type: PROGRAM         Lexeme: program         Line: 5    
TOKEN | Type: OBRACE          Lexeme: {               Line: 5    
TOKEN | Type: IF              Lexeme: if              Line: 6    
TOKEN | Type: OPAREN          Lexeme: (               Line: 6    
TOKEN | Type: ID              Lexeme: array           Line: 6    
TOKEN | Type: OBRACKET        Lexeme: [               Line: 6    
TOKEN | Type: ID              Lexeme: i               Line: 6    
TOKEN | Type: CBRACKET        Lexeme: ]               Line: 6    
TOKEN | Type: GREATER         Lexeme: >               Line: 6    
TOKEN | Type: ID              Lexeme: maxValue        Line: 6    
TOKEN | Type: CPAREN          Lexeme: )               Line: 6    
TOKEN | Type: THEN            Lexeme: then            Line: 6    
TOKEN | Type: OBRACE          Lexeme: {               Line: 6    
TOKEN | Type: ID              Lexeme: a               Line: 7    
TOKEN | Type: DEF             Lexeme: =               Line: 7    
TOKEN | Type: ID              Lexeme: true            Line: 7    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 7    
TOKEN | Type: CBRACE          Lexeme: }               Line: 8    
TOKEN | Type: ELSE            Lexeme: else            Line: 8    
TOKEN | Type: OBRACE          Lexeme: {               Line: 8    
TOKEN | Type: RETURN          Lexeme: return          Line: 9    
TOKEN | Type: OPAREN          Lexeme: (               Line: 9    
TOKEN | Type: ID              Lexeme: nothing         Line: 9    
TOKEN | Type: CPAREN          Lexeme: )               Line: 9    
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 9    
TOKEN | Type: CBRACE          Lexeme: }               Line: 10   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 10   
TOKEN | Type: FOR             Lexeme: for             Line: 12   
TOKEN | Type: OPAREN          Lexeme: (               Line: 12   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 12   
TOKEN | Type: ID              Lexeme: i               Line: 12   
TOKEN | Type: LEQ             Lexeme: <=              Line: 12   
TOKEN | Type: INTEGER         Lexeme: 49              Line: 12   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 12   
TOKEN | Type: ID              Lexeme: i               Line: 12   
TOKEN | Type: DEF             Lexeme: =               Line: 12   
TOKEN | Type: OPAREN          Lexeme: (               Line: 12   
TOKEN | Type: ID              Lexeme: i               Line: 12   
TOKEN | Type: CPAREN          Lexeme: )               Line: 12   
TOKEN | Type: PLUS            Lexeme: +               Line: 12   
TOKEN | Type: INTEGER         Lexeme: 1               Line: 12   
TOKEN | Type: CPAREN          Lexeme: )               Line: 12   
TOKEN | Type: OBRACE          Lexeme: {               Line: 12   
TOKEN | Type: ID              Lexeme: b               Line: 13   
TOKEN | Type: DEF             Lexeme: =               Line: 13   
TOKEN | Type: ID              Lexeme: false           Line: 13   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 13   
TOKEN | Type: ID              Lexeme: c               Line: 14   
TOKEN | Type: DEF             Lexeme: =               Line: 14   
TOKEN | Type: INTEGER         Lexeme: 5               Line: 14   
TOKEN | Type: ASTERISK        Lexeme: *               Line: 14   
TOKEN | Type: INTEGER         Lexeme: 7               Line: 14   
TOKEN | Type: FWDSLASH        Lexeme: /               Line: 14   
TOKEN | Type: INTEGER         Lexeme: 9               Line: 14   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 14   
TOKEN | Type: CBRACE          Lexeme: }               Line: 15   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 15   
TOKEN | Type: FOR             Lexeme: for             Line: 17   
TOKEN | Type: OPAREN          Lexeme: (               Line: 17   
TOKEN | Type: INT             Lexeme: int             Line: 17   
TOKEN | Type: ID              Lexeme: i               Line: 17   
TOKEN | Type: DEF             Lexeme: =               Line: 17   
TOKEN | Type: INTEGER         Lexeme: 0               Line: 17   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 17   
TOKEN | Type: ID              Lexeme: i               Line: 17   
TOKEN | Type: LEQ             Lexeme: <=              Line: 17   
TOKEN | Type: INTEGER         Lexeme: 49              Line: 17   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 17   
TOKEN | Type: ID              Lexeme: i               Line: 17   
TOKEN | Type: DEF             Lexeme: =               Line: 17   
TOKEN | Type: OPAREN          Lexeme: (               Line: 17   
TOKEN | Type: ID              Lexeme: i               Line: 17   
TOKEN | Type: CPAREN          Lexeme: )               Line: 17   
TOKEN | Type: PLUS            Lexeme: +               Line: 17   
TOKEN | Type: INTEGER         Lexeme: 1               Line: 17   
TOKEN | Type: CPAREN          Lexeme: )               Line: 17   
TOKEN | Type: OBRACE          Lexeme: {               Line: 17   
TOKEN | Type: ID              Lexeme: b               Line: 18   
TOKEN | Type: DEF             Lexeme: =               Line: 18   
TOKEN | Type: ID              Lexeme: false           Line: 18   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 18   
TOKEN | Type: ID              Lexeme: c               Line: 19   
TOKEN | Type: DEF             Lexeme: =               Line: 19   
TOKEN | Type: INTEGER         Lexeme: 5               Line: 19   
TOKEN | Type: ASTERISK        Lexeme: *               Line: 19   
TOKEN | Type: INTEGER         Lexeme: 7               Line: 19   
TOKEN | Type: FWDSLASH        Lexeme: /               Line: 19   
TOKEN | Type: INTEGER         Lexeme: 9               Line: 19   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 19   
TOKEN | Type: CBRACE          Lexeme: }               Line: 20   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 20   
TOKEN | Type: COMMENT         Lexeme: //              Line: 22   
TOKEN | Type: COMMENT         Lexeme: //              Line: 23   
TOKEN | Type: COMMENT         Lexeme: //              Line: 24   
TOKEN | Type: CBRACE          Lexeme: }               Line: 26   
TOKEN | Type: SEMICOLON       Lexeme: ;               Line: 26   
TOKEN | Type: EOF             Lexeme: $               Line: 26   
TOKEN | Type: EOF             Lexeme: $               Line: 26   
